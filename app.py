import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

st.title("ğŸŒŒ Heaven Threshold â€” Modelo AgnÃ³stico")

uploaded_file = st.file_uploader("Envie seu CSV", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.write("ğŸ“Š Dados carregados:", df.head())

    # UsuÃ¡rio escolhe qual Ã© a coluna alvo
    target_col = st.selectbox("Escolha a variÃ¡vel alvo (y)", df.columns)

    # Features sÃ£o todas as outras colunas numÃ©ricas
    features = [col for col in df.columns if col != target_col]

    if len(features) == 0:
        st.error("NÃ£o hÃ¡ features numÃ©ricas suficientes para treinar.")
    else:
        X = df[features]
        y = df[target_col]

        # Divide os dados
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.3, random_state=42
        )

        # Pipeline genÃ©rico: normalizaÃ§Ã£o + modelo
        pipe = Pipeline([
            ("scaler", StandardScaler()),
            ("model", LogisticRegression(max_iter=200))
        ])

        # Treina
        pipe.fit(X_train, y_train)

        # Avalia
        score = pipe.score(X_test, y_test)
        st.write(f"âœ… AcurÃ¡cia no teste: {score:.2f}")

        # Coeficientes para legenda genÃ©rica
        if hasattr(pipe.named_steps["model"], "coef_"):
            coefs = pipe.named_steps["model"].coef_[0]
            legenda = {f"feat_{i}": f"{features[i]} (peso={coefs[i]:.2f})"
                       for i in range(len(features))}
            st.write("ğŸ“Œ Legenda genÃ©rica das features:")
            st.json(legenda)

        # RelatÃ³rio
        y_pred = pipe.predict(X_test)
        st.text("ğŸ“‘ RelatÃ³rio de classificaÃ§Ã£o:")
        st.text(classification_report(y_test, y_pred))
